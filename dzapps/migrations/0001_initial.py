# Generated by Django 3.2.1 on 2021-06-10 05:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.utils.timezone

def change_user_type(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ct = ContentType.objects.filter(
        app_label='auth',
        model='user'
    ).first()
    if ct:
        ct.app_label = 'user'
        ct.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(change_user_type),
        migrations.CreateModel(
            name='BuildingsBis',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True)),
                ('the_geom', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=2154)),
            ],
            options={
                'verbose_name': 'building',
                'db_table': 'buildings_bis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Departement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_departement', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'departement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Detection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'detection',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DetectionContour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_detection', models.BigIntegerField(unique=True)),
            ],
            options={
                'db_table': 'detection_contour',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Libelle',
            fields=[
                ('pk_id', models.AutoField(primary_key=True, serialize=False)),
                ('libelle', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'libelle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LibelleBis',
            fields=[
                ('id_niveau', models.AutoField(primary_key=True, serialize=False)),
                ('libelle', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'libelle_bis',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatDepartement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_departement', models.TextField(unique=True)),
                ('type_statistique', models.TextField(blank=True, null=True)),
                ('valeur', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'stat_departement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatutWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cle', models.IntegerField(unique=True)),
                ('libelle', models.TextField()),
            ],
            options={
                'db_table': 'statut_workflow',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_structure', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'test',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestKb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'test_kb',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
